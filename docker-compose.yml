version: "3.9"

services:
    # application
    # : sandbox application that enables emotion recognition from facial features
    application-frontend:
        restart: unless-stopped
        build: ./ml-frontend
        image: chimp-frontend-app:demonstrator-v1.5.0
        container_name: frontend-app-abdul
        networks:
            - public-network
            - backend-network
        ports:
            - "5252:8000"
        environment:
            - UID=1000
            - GID=1000
            - EXPERIMENT_NAME=base_mobilenetv2_128_64_fer2013_2024_12_19
            - MODEL_NAME=onnx_emo_datastore
            - MODEL_INFERENCE_URL=http://serving-api:8000
            - TRAINING_SERVER_URL=http://training-api:8000
        #volumes:
            #- ./docker-data/webapp/html:/usr/src/app/templates
            #- ./docker-data/webapp/images:/usr/src/app/static/images
            #- ./docker-data/webapp/css:/usr/src/app/static/css
            #- ./docker-data/webapp/js:/usr/src/app/static/js
        depends_on:
            - monitoring-server
        profiles:
            - ''
            - 'gpu'
            - 'external-worker'

    # Training API
    # : provides the API endpoints for starting training
    training-api:
        container_name: training-api
        restart: unless-stopped
        build:
            context: ./training
            dockerfile: Dockerfile.web
        healthcheck:
            test: ["CMD-SHELL", "wget -nv -t1 --spider 'http://localhost:8000/health || exit 1"]
            start_period: 30s
            interval: 60s
            retries: 5
            timeout: 15s
        networks:
            - backend-network
        ports:
            - "5253:8000"
        environment:
            - LEGACY_PLUGIN_NAME=Emotion Recognition
            - TRACKING_URI=http://monitoring-server:8999
            - CELERY_BROKER_URL=amqp://message-queue
            - CELERY_RESULTS_BACKEND=rpc://message-queue
            - DATASTORE_ACCESS_KEY=yZmhrURuUhaeVSUagMRa
            - DATASTORE_SECRET_KEY=cnk0OxGuIgVx4La0prNaWUv7JpriCnxZfq2417ba
            - DATASTORE_URI=datastore:9000
            - DATABASE_URI=postgres-db:5432
            - DATABASE_USER=chimp_user
            - DATABASE_PASSWORD=chimp_password
            - DATABASE_NAME=chimp_database
        volumes:
            - ${DATASETS_FOLDER:-./training/datasets}:/usr/src/app/datasets
            - ./training/app/plugins:/usr/src/app/app/plugins
        depends_on:
            - monitoring-server
            - postgres-db
        profiles:
            - ''
            - 'gpu'
            - 'external-worker'

    # Training Worker
    # : worker for the training service that does the actual training.
    training-worker:
        container_name: training-worker
        restart: unless-stopped
        build:
            context: ./training
            dockerfile: Dockerfile.worker
        networks:
            - backend-network
        environment:
            - LEGACY_PLUGIN_NAME=Emotion Recognition
            - TRACKING_URI=http://monitoring-server:8999
            - CELERY_BROKER_URL=amqp://message-queue
            - CELERY_RESULTS_BACKEND=rpc://message-queue
            - DATASTORE_ACCESS_KEY=yZmhrURuUhaeVSUagMRa
            - DATASTORE_SECRET_KEY=cnk0OxGuIgVx4La0prNaWUv7JpriCnxZfq2417ba
            - DATASTORE_URI=datastore:9000
            - DATABASE_URI=postgres-db:5432
            - DATABASE_USER=chimp_user
            - DATABASE_PASSWORD=chimp_password
            - DATABASE_NAME=chimp_database
        volumes:
            - ${DATASETS_FOLDER:-./training/datasets}:/usr/src/app/datasets:ro
            - ./training/app/plugins:/usr/src/app/app/plugins
        depends_on:
            - monitoring-server
            - postgres-db
        profiles:
            - ''
            - 'worker-only'

    # Training Worker - GPU
    # : worker for the training service that does the actual training with GPU.
    training-worker-gpu:
        container_name: training-worker
        restart: unless-stopped
        build:
            context: ./training
            dockerfile: Dockerfile.worker
        deploy:
            resources:
                reservations:
                    devices:
                        - driver: nvidia
                          count: 1
                          capabilities: [gpu]
        networks:
            - backend-network
        environment:
            - LEGACY_PLUGIN_NAME=Emotion Recognition
            - TRACKING_URI=http://monitoring-server:8999
            - CELERY_BROKER_URL=amqp://message-queue
            - CELERY_RESULTS_BACKEND=rpc://message-queue
            - DATASTORE_ACCESS_KEY=yZmhrURuUhaeVSUagMRa
            - DATASTORE_SECRET_KEY=cnk0OxGuIgVx4La0prNaWUv7JpriCnxZfq2417ba
            - DATASTORE_URI=datastore:9000
            - DATABASE_URI=postgres-db:5432
            - DATABASE_NAME=chimp_database
            - DATABASE_USER=chimp_user
            - DATABASE_PASSWORD=chimp_password
        volumes:
            - ${DATASETS_FOLDER:-./training/datasets}:/usr/src/app/datasets
            - ./training/app/plugins:/usr/src/app/app/plugins
        depends_on:
            - monitoring-server
            - postgres-db
        profiles:
            - 'gpu'
            - 'worker-only-gpu'

    # Serving API
    # : serves models from the artifact store to applications
    serving-api:
        container_name: serving-api
        restart: unless-stopped
        build:
            context: ./serving_api
            dockerfile: Dockerfile
        healthcheck:
            test: ["CMD-SHELL", "wget -nv -t1 --spider 'http://localhost:8000/health || exit 1"]
            start_period: 30s
            interval: 60s
            retries: 5
            timeout: 15s
        networks:
            - backend-network
        ports:
            - "5254:8000"
        environment:
            - LEGACY_MODEL_NAME=OnnxEmotionModel
            - TRACKING_URI=http://monitoring-server:8999
        depends_on:
            - monitoring-server
        profiles:
            - ''
            - 'gpu'
            - 'external-worker'

    # monitoring
    # : runs mlflow tracking server with a web-interface, makes use of sqlite database (rdbms/data store) and local
    #   files (artifact-/object store) for ease of deployment with persistent storage
    monitoring-server:
        restart: unless-stopped
        build:
            context: ./mlflow-tracking
            dockerfile: Dockerfile
        image: chimp-mlflow:demonstrator-v1.0.0
        container_name: mlflow-tracking-server
        healthcheck:
            test: ["CMD-SHELL", "wget -nv -t1 --spider 'http://localhost:8999/health' || exit 1"]
            start_period: 30s
            interval: 1m30s
            retries: 5
            timeout: 30s
        networks:
            - public-network
            - backend-network
        ports:
            - "8999:8999"
        environment:
            - UID=1000
            - GID=1000
        volumes:
            - ./docker-data/monitoring:/data
        command: mlflow server --backend-store-uri sqlite:///data/mlflow.db --artifacts-destination /data/mlruns --host 0.0.0.0 --port 8999 --serve-artifacts
        profiles:
            - ''
            - 'gpu'
            - 'services'
            - 'external-worker'

    # message queue
    # : serves as a message broker for the CHIMP system.
    message-queue:
        restart: unless-stopped
        image: rabbitmq:3.13-management
        container_name: message-queue
        healthcheck:
            test: rabbitmq-diagnosis check_port_connectivity
            start_period: 30s
            interval: 1m
            timeout: 30s
            retries: 5
        networks:
            - public-network
            - backend-network
        ports:
            - "5672:5672"
            - "15672:15672"
        profiles:
            - ''
            - 'gpu'
            - 'services'
            - 'external-worker'

    # datastore
    # : storage for datasets and MLFlow
    datastore:
        image: quay.io/minio/minio
        container_name: chimp_datastore
        command: server --console-address ":9001" /data
        restart: unless-stopped
        ports:
            - "9000:9000"
            - "9001:9001"
        healthcheck:
            test: ["CMD", "mc", "ready", "local"]
            interval: 5s
            timeout: 5s
            retries: 5
        volumes:
            - ./docker-data/datastore:/data
        networks:
            - public-network
            - backend-network
        profiles:
            - ''
            - 'gpu'
            - 'services'

    # postgresql
    # : database for managed datasets        
    postgres-db:
        image: postgres:17
        container_name: chimp-postgres
        restart: unless-stopped
        networks:
            - backend-network
        ports:
            - "5432:5432"
        environment:
            POSTGRES_USER: chimp_user
            POSTGRES_PASSWORD: chimp_password
            POSTGRES_DB: chimp_database
        volumes:
            - ./docker-data/postgres:/var/lib/postgresql/data
        profiles:
            - ''
            - 'gpu'
            - 'services'

networks:
    public-network:
        name: 'chimp-public-network'
    backend-network:
        name: 'chimp-backend-network'
